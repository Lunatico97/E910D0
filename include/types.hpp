#ifndef _TYPES_H_
#define _TYPES_H_

#define D7 0b10000000
#define D6 0b01000000
#define D5 0b00100000
#define D4 0b00010000
#define D3 0b00001000
#define D2 0b00000100
#define D1 0b00000010
#define D0 0b00000001

typedef unsigned char u8;
typedef unsigned short u16;

struct OPCODE
{
    u8 value;
    u8 bytes;
};

struct HEX
{
    u8 h8[3];
};

static const u8 IL_MAP[256] = {
       1,    2,    1,    1,    1,    2,    2,    1,    1,    2,    1,    1,    1,    3,    3,    1,
       2,    2,    1,    1,    1,    2,    2,    1,    1,    3,    1,    1,    1,    3,    3,    1,
       3,    2,    1,    1,    2,    2,    2,    1,    1,    2,    1,    1,    3,    3,    3,    1,
       2,    2,    1,    1,    1,    2,    2,    1,    1,    3,    1,    1,    1,    3,    3,    1,
       1,    2,    1,    1,    1,    2,    2,    1,    1,    2,    1,    1,    3,    3,    3,    1,
       2,    2,    1,    1,    1,    2,    2,    1,    1,    3,    1,    1,    1,    3,    3,    1,
       1,    2,    1,    1,    1,    2,    2,    1,    1,    2,    1,    1,    3,    3,    3,    1,
       2,    2,    1,    1,    1,    2,    2,    1,    1,    3,    1,    1,    1,    3,    3,    1,
       1,    2,    1,    1,    2,    2,    2,    1,    1,    1,    1,    1,    3,    3,    3,    1,
       2,    2,    1,    1,    2,    2,    2,    1,    1,    3,    1,    1,    1,    3,    1,    1,
       2,    2,    2,    1,    2,    2,    2,    1,    1,    2,    1,    1,    3,    3,    3,    1,
       2,    2,    1,    1,    2,    2,    2,    1,    1,    3,    1,    1,    3,    3,    3,    1,
       2,    2,    1,    1,    2,    2,    2,    1,    1,    2,    1,    1,    3,    3,    3,    1,
       2,    2,    1,    1,    1,    2,    2,    1,    1,    3,    1,    1,    1,    3,    3,    1,
       2,    2,    1,    1,    2,    2,    2,    1,    1,    2,    1,    1,    3,    3,    3,    1,
       2,    2,    1,    1,    1,    2,    2,    1,    1,    3,    1,    1,    1,    3,    3,    1
};

struct RGB {
    uint8_t r;
    uint8_t g;
    uint8_t b;
};

// RGB Approximation for NES Master Pallette
const RGB RGB_PAL[] = {
    // Index 0x00 - 0x0F
    {0x66, 0x66, 0x66}, {0x00, 0x2A, 0x88}, {0x14, 0x12, 0xA7}, {0x3B, 0x00, 0xA4}, 
    {0x5F, 0x00, 0x51}, {0x6E, 0x00, 0x0C}, {0x6D, 0x08, 0x00}, {0x5D, 0x1B, 0x00}, 
    {0x3F, 0x30, 0x00}, {0x0E, 0x44, 0x00}, {0x00, 0x4E, 0x00}, {0x00, 0x48, 0x24}, 
    {0x00, 0x3A, 0x5C}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, 

    // Index 0x10 - 0x1F
    {0xAD, 0xAD, 0xAD}, {0x15, 0x5F, 0xD9}, {0x3C, 0x40, 0xFF}, {0x6A, 0x2C, 0xFF}, 
    {0x97, 0x26, 0xB3}, {0xB1, 0x20, 0x5F}, {0xB0, 0x30, 0x00}, {0x9F, 0x48, 0x00}, 
    {0x7C, 0x60, 0x00}, {0x45, 0x7A, 0x00}, {0x13, 0x83, 0x00}, {0x00, 0x7C, 0x40}, 
    {0x00, 0x6B, 0x8D}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, 

    // Index 0x20 - 0x2F
    {0xFF, 0xFF, 0xFF}, {0x4C, 0xAB, 0xFF}, {0x7D, 0x98, 0xFF}, {0xAC, 0x88, 0xFF}, 
    {0xD7, 0x7B, 0xFF}, {0xF1, 0x73, 0xCE}, {0xF0, 0x83, 0x60}, {0xF0, 0x9B, 0x2F}, 
    {0xD8, 0xB0, 0x20}, {0xA0, 0xCB, 0x00}, {0x6E, 0xD6, 0x00}, {0x4C, 0xD1, 0x6C}, 
    {0x4C, 0xC4, 0xA0}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, 

    // Index 0x30 - 0x3F
    {0xFF, 0xFF, 0xFF}, {0x96, 0xCD, 0xFF}, {0xBC, 0xC4, 0xFF}, {0xD9, 0xB8, 0xFF}, 
    {0xF2, 0xB0, 0xFF}, {0xFF, 0xA4, 0xCC}, {0xFF, 0xB8, 0xA8}, {0xFF, 0xD0, 0x88}, 
    {0xFC, 0xE0, 0xA8}, {0xC8, 0xEF, 0xA8}, {0x9C, 0xF2, 0xB0}, {0x88, 0xF0, 0xD0}, 
    {0x96, 0xE8, 0xE8}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00} 
};

#endif